// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using POS.DAL.Domain;

#nullable disable

namespace POS.DAL.Migrations
{
    [DbContext(typeof(POSContext))]
    [Migration("20251029123342_InitialSQLite")]
    partial class InitialSQLite
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.10");

            modelBuilder.Entity("POS.DAL.Domain.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Username" }, "IX_AppUser_Username")
                        .IsUnique();

                    b.ToTable("AppUser", (string)null);
                });

            modelBuilder.Entity("POS.DAL.Domain.CurrencyRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BaseValue")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("FinalRate")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<double>("Rate")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("RateDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("ReverseCalculation")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("CurrencyRate", (string)null);
                });

            modelBuilder.Entity("POS.DAL.Domain.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("AmountPaid")
                        .HasColumnType("REAL");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("CurrencyRate")
                        .HasColumnType("REAL");

                    b.Property<byte>("InvoiceType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ItemsCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<double>("OverallDiscount")
                        .HasColumnType("REAL");

                    b.Property<int?>("PartnerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PartnerName")
                        .HasColumnType("TEXT");

                    b.Property<byte>("PaymentType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SerialNum")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("WalletId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("WalletId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Invoice", (string)null);
                });

            modelBuilder.Entity("POS.DAL.Domain.InvoiceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cost")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Profit")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalDiscount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UnitDiscount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UnitPrice")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("InvoiceItem", (string)null);
                });

            modelBuilder.Entity("POS.DAL.Domain.OptionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("OptionType", (string)null);
                });

            modelBuilder.Entity("POS.DAL.Domain.OptionValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Flag")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("TypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("OptionValue", (string)null);
                });

            modelBuilder.Entity("POS.DAL.Domain.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentBalance")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<int>("PartnerTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PartnerTypeId");

                    b.ToTable("Partner", (string)null);
                });

            modelBuilder.Entity("POS.DAL.Domain.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AlertQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BrandId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Cost")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Discount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<int>("InitialQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Profit")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UnitId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("UnitId");

                    b.HasIndex(new[] { "Code" }, "IX_Product_Code")
                        .IsUnique();

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("POS.DAL.Domain.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AppTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<byte>("CalendarType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LayoutName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("PK_Settings");

                    b.ToTable("Setting", (string)null);
                });

            modelBuilder.Entity("POS.DAL.Domain.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("CurrencyRate")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PartnerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PartnerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("SourceId")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("TransactionType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("WalletId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("SourceId");

                    b.HasIndex("WalletId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("POS.DAL.Domain.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentBalance")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("PK_Box");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Wallet", (string)null);
                });

            modelBuilder.Entity("POS.DAL.Domain.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Warehouse", (string)null);
                });

            modelBuilder.Entity("POS.DAL.Domain.CurrencyRate", b =>
                {
                    b.HasOne("POS.DAL.Domain.OptionValue", "Currency")
                        .WithMany("CurrencyRates")
                        .HasForeignKey("CurrencyId")
                        .IsRequired()
                        .HasConstraintName("FK_CurrencyRate_Currency");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("POS.DAL.Domain.Invoice", b =>
                {
                    b.HasOne("POS.DAL.Domain.OptionValue", "Currency")
                        .WithMany("Invoices")
                        .HasForeignKey("CurrencyId")
                        .IsRequired()
                        .HasConstraintName("FK_Invoice_Currency");

                    b.HasOne("POS.DAL.Domain.Partner", "Partner")
                        .WithMany("Invoices")
                        .HasForeignKey("PartnerId");

                    b.HasOne("POS.DAL.Domain.AppUser", "UpdatedByNavigation")
                        .WithMany("Invoices")
                        .HasForeignKey("UpdatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Invoice_AppUser");

                    b.HasOne("POS.DAL.Domain.Wallet", "Wallet")
                        .WithMany("Invoices")
                        .HasForeignKey("WalletId")
                        .IsRequired();

                    b.HasOne("POS.DAL.Domain.Warehouse", "Warehouse")
                        .WithMany("Invoices")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("FK_Invoice_Warehouse");

                    b.Navigation("Currency");

                    b.Navigation("Partner");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("Wallet");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("POS.DAL.Domain.InvoiceItem", b =>
                {
                    b.HasOne("POS.DAL.Domain.Invoice", "Invoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_InvoiceItem_Invoice");

                    b.HasOne("POS.DAL.Domain.Product", "Product")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_InvoiceItem_Product");

                    b.Navigation("Invoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("POS.DAL.Domain.OptionValue", b =>
                {
                    b.HasOne("POS.DAL.Domain.OptionType", "Type")
                        .WithMany("OptionValues")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK_OptionValue_OptionType");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("POS.DAL.Domain.Partner", b =>
                {
                    b.HasOne("POS.DAL.Domain.OptionValue", "Currency")
                        .WithMany("PartnerCurrencies")
                        .HasForeignKey("CurrencyId")
                        .IsRequired();

                    b.HasOne("POS.DAL.Domain.OptionValue", "PartnerType")
                        .WithMany("PartnerPartnerTypes")
                        .HasForeignKey("PartnerTypeId")
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("PartnerType");
                });

            modelBuilder.Entity("POS.DAL.Domain.Product", b =>
                {
                    b.HasOne("POS.DAL.Domain.OptionValue", "Brand")
                        .WithMany("ProductBrands")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_Product_Brand");

                    b.HasOne("POS.DAL.Domain.OptionValue", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Product_Category");

                    b.HasOne("POS.DAL.Domain.OptionValue", "Currency")
                        .WithMany("ProductCurrencies")
                        .HasForeignKey("CurrencyId")
                        .IsRequired()
                        .HasConstraintName("FK_Product_Currency");

                    b.HasOne("POS.DAL.Domain.OptionValue", "Unit")
                        .WithMany("ProductUnits")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK_Product_Unit");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Currency");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("POS.DAL.Domain.Transaction", b =>
                {
                    b.HasOne("POS.DAL.Domain.OptionValue", "Currency")
                        .WithMany("TransactionCurrencies")
                        .HasForeignKey("CurrencyId")
                        .IsRequired()
                        .HasConstraintName("FK_Transaction_Currency");

                    b.HasOne("POS.DAL.Domain.Invoice", "Invoice")
                        .WithMany("Transactions")
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("FK_Transaction_Invoice");

                    b.HasOne("POS.DAL.Domain.Partner", "Partner")
                        .WithMany("Transactions")
                        .HasForeignKey("PartnerId");

                    b.HasOne("POS.DAL.Domain.OptionValue", "Source")
                        .WithMany("TransactionSources")
                        .HasForeignKey("SourceId")
                        .IsRequired()
                        .HasConstraintName("FK_Transaction_OptionValue");

                    b.HasOne("POS.DAL.Domain.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Invoice");

                    b.Navigation("Partner");

                    b.Navigation("Source");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("POS.DAL.Domain.Wallet", b =>
                {
                    b.HasOne("POS.DAL.Domain.OptionValue", "Currency")
                        .WithMany("Wallets")
                        .HasForeignKey("CurrencyId")
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("POS.DAL.Domain.AppUser", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("POS.DAL.Domain.Invoice", b =>
                {
                    b.Navigation("InvoiceItems");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("POS.DAL.Domain.OptionType", b =>
                {
                    b.Navigation("OptionValues");
                });

            modelBuilder.Entity("POS.DAL.Domain.OptionValue", b =>
                {
                    b.Navigation("CurrencyRates");

                    b.Navigation("Invoices");

                    b.Navigation("PartnerCurrencies");

                    b.Navigation("PartnerPartnerTypes");

                    b.Navigation("ProductBrands");

                    b.Navigation("ProductCategories");

                    b.Navigation("ProductCurrencies");

                    b.Navigation("ProductUnits");

                    b.Navigation("TransactionCurrencies");

                    b.Navigation("TransactionSources");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("POS.DAL.Domain.Partner", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("POS.DAL.Domain.Product", b =>
                {
                    b.Navigation("InvoiceItems");
                });

            modelBuilder.Entity("POS.DAL.Domain.Wallet", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("POS.DAL.Domain.Warehouse", b =>
                {
                    b.Navigation("Invoices");
                });
#pragma warning restore 612, 618
        }
    }
}
